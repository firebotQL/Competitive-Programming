#include <string>
#include <vector>


using namespace std;
const char ccHorizontalSegment = '-';
const char ccVertialSegment = '|';

int** baseNumbers = 
{
	{2,4,0,4,2}
	{0,3,0,3,0},
	{2,3,2,1,3},
	{2,3,2,3,2},
	{0,4,2,3,0},
	{2,1,2,3,2},
	{2,1,2,4,2},
	{2,3,0,3,0},
	{2,4,2,4,2},
	{2,4,2,3,2}
}

/*0 - do nothing
1,3,4 - multiply('|') rows;
2 - multiply ('-') columns;
// Each digit occupies exactly s+2 columns and 2s+3 rows
*/

string CreateHorizontalString(int rowLength)
{
	string filled(rowLength, ccHorizontalSegment);
	string fullRow(2, ' ');
	fullRow.insert(1, filled);
	return fullRow;
}

string CreateHorizontalString(int rowLength, int type )
{
	switch(type)
	{
		case 1:
			string first(1, ccVertialSegment);
			string filled(rowLength+1, ' ');
			first.insert(1, filled);
			return first;
		case 3:
			string last(1, ccVertialSegment);
			string filled(rowLength+1, ' ');
			filled.insert(filled.size(), last);
			return filled;
		case 4:
			string firstlast(2, ccVertialSegment);
			string filled(rowLength, ' ');
			firstlast.insert(1, filled);
			return firstlast;
	}
}

int main()
{
	string number, row;
	int s, i, j, curNum;
	int* bNumber;
	while (cin >> s && cin >> number && s != 0 && number != "0")
	{
		for(int l = 0; l < number.length(); l++)
		{
			curNum = atoi(number[l]);
			bNumber = baseNumbers[curNum];
			for(i = 0; i < 5; i++)
			{
				switch(bNumber[i])
				{
					case 0:
						printf("%s",sEmpty);
						break;
					case 1:
					case 3:
					case 4:
						row = CreateVerticalString(s, bNumber[i]);
						for(j = 0; j < s; j++)
							printf("%s", row);
						break;				
					case 2:
						printf("%s", CreateHorizontalString(s));
						break;
						
				}
			}
		}
	}
	return 0;
}